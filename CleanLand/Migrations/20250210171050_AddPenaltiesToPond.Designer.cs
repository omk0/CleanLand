// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using CleanLand.Data.Data;

#nullable disable

namespace CleanLand.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250210171050_AddPenaltiesToPond")]
    partial class AddPenaltiesToPond
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanLand.Data.Models.LeaseAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EconomicActivities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TermInYears")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LeaseAgreements");
                });

            modelBuilder.Entity("CleanLand.Data.Models.Lessee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdentificationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lessees");
                });

            modelBuilder.Entity("CleanLand.Data.Models.Pond", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Basin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CadastralNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CollectedDamages")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CollectedFines")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Depth")
                        .HasColumnType("float");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasHydraulicStructure")
                        .HasColumnType("bit");

                    b.Property<string>("HydraulicStructureOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ImposedDamages")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ImposedFines")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDrainable")
                        .HasColumnType("bit");

                    b.Property<string>("Issues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeaseAgreementId")
                        .HasColumnType("int");

                    b.Property<double>("LeasedArea")
                        .HasColumnType("float");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<int>("LesseeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("River")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Settlement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TerritorialCommunity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.Property<double>("WaterLevel")
                        .HasColumnType("float");

                    b.Property<double>("WaterSurfaceArea")
                        .HasColumnType("float");

                    b.Property<int>("WaterUsagePermitId")
                        .HasColumnType("int");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LeaseAgreementId");

                    b.HasIndex("LesseeId");

                    b.HasIndex("WaterUsagePermitId");

                    b.ToTable("Ponds");
                });

            modelBuilder.Entity("CleanLand.Data.Models.WaterUsagePermit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TermInYears")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WaterUsagePermits");
                });

            modelBuilder.Entity("CleanLand.Data.Models.Pond", b =>
                {
                    b.HasOne("CleanLand.Data.Models.LeaseAgreement", "LeaseAgreement")
                        .WithMany("Ponds")
                        .HasForeignKey("LeaseAgreementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanLand.Data.Models.Lessee", "Lessee")
                        .WithMany("Ponds")
                        .HasForeignKey("LesseeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanLand.Data.Models.WaterUsagePermit", "WaterUsagePermit")
                        .WithMany("Ponds")
                        .HasForeignKey("WaterUsagePermitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaseAgreement");

                    b.Navigation("Lessee");

                    b.Navigation("WaterUsagePermit");
                });

            modelBuilder.Entity("CleanLand.Data.Models.LeaseAgreement", b =>
                {
                    b.Navigation("Ponds");
                });

            modelBuilder.Entity("CleanLand.Data.Models.Lessee", b =>
                {
                    b.Navigation("Ponds");
                });

            modelBuilder.Entity("CleanLand.Data.Models.WaterUsagePermit", b =>
                {
                    b.Navigation("Ponds");
                });
#pragma warning restore 612, 618
        }
    }
}
